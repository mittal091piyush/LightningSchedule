<!-- c:ScheduleDetail -->
<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" controller="ChangeSceduleAL_ctrl" access="global" >
    
    <!-- Attribute -->
    <aura:attribute name="Schedules" type="List"/>
    <aura:attribute name="SchedulesShow" type="List"/>
    <aura:attribute name="SchID" type="String" />
    <aura:attribute name="CaseID" type="String" />  
    <aura:attribute name="oppId" type="String" /> 
    <aura:attribute name="showSchedule" type="Boolean"  /> 
    <aura:attribute name="caseToggle" type="List" />
    <aura:attribute name="caseToggleShow" type="List" />    
    
    <aura:attribute name="defSchedule" type="Schedule__c" default="{
                                                                   'Id' : '',
                                                                   'Assignee__c' : '',
                                                                   'Scheduled_Date__c' : '',
                                                                   'Status__c' : '' ,
                                                                   'Type__c' : ''   
                                                                   }" />      
    <aura:attribute name="crtSchedule" type="Schedule__c" default="{
                                                                   'Id' : '',
                                                                   'Assignee__c' : '',
                                                                   'Scheduled_Date__c' : '',
                                                                   'Status__c' : '' ,
                                                                   'Type__c' : ''   
                                                                   }" />          
    <aura:attribute name="isModalOpen" type="Boolean" default="false" />  
    <aura:attribute name="showSpinner" type="Boolean"  />            
    <!-- Attribute -->
    
    <!-- Handler -->
    <aura:handler name="init" action="{!c.doInIt}" value="{!this}" />
    <!-- Handler -->
    <!-- Spinner -->
    <aura:if isTrue="{!v.showSpinner}">
        <div class="demo-only" style="height:6rem">
            <div class="slds-spinner_container">
                <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                    <span class="slds-assistive-text">Loading</span>
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
            </div>
        </div>
    </aura:if>    
    <!-- Spinner -->
    <!-- Table -->    
    <aura:if isTrue="{!v.SchedulesShow.length > 0}">
        <div style="border-color : black;" >
            <table class="slds-table slds-table_cell-buffer slds-table_bordered slds-table_col-bordered">
                <thead>
                    <tr class="slds-line-height_reset">
                        <th class="" scope="col">
                            <div class="slds-truncate" title=""></div>
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate" title="Assignee">Assignee</div>
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate" title="Scheduled Date">Scheduled Date</div>
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate" title="Status">Status</div>
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate" title="Type">Type</div>
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate" title="Created Date">Created Date</div>
                        </th>
                        <th class="" scope="col">
                            <lightning:button variant="brand" label="New Schedule" onclick="{!c.handleNewSch}" />
                        </th>                    
                    </tr>
                </thead>
                <tbody>
                    <aura:iteration items="{!v.SchedulesShow}" var="item">
                        <tr class="slds-hint-parent">      
                            <td data-label="Close Date">
                                <lightning:buttonMenu alternativeText="Show menu">                                
                                    <lightning:menuItem value="Edit" title="{!item.Id}" label="Edit" onactive="{!c.handleEdit}" />
                                    <lightning:menuItem value="Delete" title="{!item.Id}" label="Delete" onactive="{!c.handleDelete}"/>
                                </lightning:buttonMenu>
                            </td>
                            <td data-label="Assignee">
                                <div class="slds-truncate" title="{!item.value.Assignee__c}">{!item.value.Assignee__c}</div>
                            </td>
                            <td data-label="Scheduled Date">
                                <lightning:formattedDateTime value="{!item.value.Scheduled_Date__c}" year="2-digit" month="short" day="2-digit" weekday="short" />                                        
                            </td>
                            <td data-label="Status">
                                <div class="slds-truncate" title="{!item.value.Status__c}">{!item.value.Status__c}</div>
                            </td>
                            <td data-label="Type">
                                <div class="slds-truncate" title="{!item.value.Type__c}">{!item.value.Type__c}</div>
                            </td>
                            <td data-label="Created Date">
                                <lightning:formattedDateTime value="{!item.value.CreatedDate}" year="2-digit" month="short" day="2-digit" hour="numeric" minute="numeric"
                                                             second="numeric" />                                        
                            </td>
                        </tr>  
                        <tr>
                            <!-- Modal -->
                            <aura:if isTrue="{!item.showEdit}">        
                                <!-- Modal/Popup Box starts here-->
                                <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                                    <div class="slds-modal__container">
                                        <!-- Modal/Popup Box Header Starts here-->
                                        <header class="slds-modal__header">
                                            <lightning:buttonIcon iconName="utility:close" onclick="{! c.closeModel }" alternativeText="close" variant="bare-inverse" class="slds-modal__close"/>                                                              
                                            <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Schedule</h2>
                                        </header>
                                        <!--Modal/Popup Box Body Starts here-->
                                        <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                                            <lightning:recordEditForm recordId="{!item.Id}" objectApiName="Schedule__c" onsuccess = "{! c.handleSuccessEdit }">
                                                <lightning:messages />
                                                <lightning:inputField fieldName="Assignee__c" value="{!v.crtSchedule.Assignee__c}" />
                                                <lightning:inputField fieldName="Scheduled_Date__c" value="{!v.crtSchedule.Scheduled_Date__c}" />
                                                <lightning:inputField fieldName="Status__c" value="{!v.crtSchedule.Status__c}" />
                                                <lightning:inputField fieldName="Type__c" value="{!v.crtSchedule.Type__c}" />
                                                <lightning:inputField fieldName="Completed_Date__c" value="{!v.crtSchedule.Completed_Date__c}" />
                                                <lightning:button class="slds-m-top_small" variant="brand" type="submit" name="update" label="Update" />
                                                <lightning:button class="slds-m-top_small" variant="neutral" label="Cancel" title="Cancel" onclick="{! c.closeModel }"/>                                                          
                                            </lightning:recordEditForm>
                                        </div>
                                        <!--Modal/Popup Box Footer Starts here-->
                                        <footer class="slds-modal__footer">                                       
                                        </footer>
                                    </div>
                                </section>
                                <div class="slds-backdrop slds-backdrop_open"></div>
                            </aura:if>
                            <!-- Modal -->                        
                        </tr>
                        <tr>                                                   
                        </tr> 
                    </aura:iteration>
                </tbody>
            </table>
        </div>	        
        <aura:set attribute="else">
            <h2  class="slds-text-heading_medium slds-hyphenate">There are no schedules for this Location</h2>
            <lightning:button variant="brand" label="New Schedule" onclick="{!c.handleNewSch}" />
        </aura:set>    
    </aura:if>
    
    
    <div>
        <!-- Modal -->
        <aura:if isTrue="{!v.isModalOpen}">        
            <!-- Modal/Popup Box starts here-->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box Header Starts here-->
                    <header class="slds-modal__header">
                        <lightning:buttonIcon iconName="utility:close" onclick="{! c.handleCloseCreate }" alternativeText="close" variant="bare-inverse" class="slds-modal__close"/>                                                              
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">New Schedule</h2>
                    </header>
                    <!--Modal/Popup Box Body Starts here-->
                    <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                        <lightning:recordEditForm aura:id="recordEditForm"
                                                  objectApiName="Schedule__c" onsuccess = "{! c.handleSuccessCreate }" >
                            <lightning:messages />
                            <lightning:inputField fieldName="Assignee__c"  />
                            <lightning:inputField fieldName="Scheduled_Date__c" />
                            <lightning:inputField fieldName="Status__c" />
                            <lightning:inputField fieldName="Type__c" />
                            <lightning:inputField fieldName="Location__c" value="{!v.oppId}" />
                            <lightning:inputField fieldName="Case__c" value="{!v.CaseID}" />                                            
                            <lightning:button class="slds-m-top_small" variant="brand" type="submit" name="update" label="Create" onclick="{!c.handleCreate}" />
                            <lightning:button class="slds-m-top_small" variant="neutral" label="Cancel" title="Cancel" onclick="{! c.handleCloseCreate }"/>                                                          
                        </lightning:recordEditForm>
                    </div>
                    <!--Modal/Popup Box Footer Starts here-->
                    <footer class="slds-modal__footer">                                       
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open"></div>
            
        </aura:if>
        <!-- Modal -->
    </div>
    
    <!-- Table -->
</aura:component>

***********
CONTROLLER
***********
({
    doInIt : function(component, event, helper){
        var Schedules = component.get( "v.Schedules" );
        var SchedulesShow = [];
        console.log( "Schedules --> "+Schedules );
        if( Schedules == undefined ){
            component.set( "v.showSchedule", false );    
        }else{
            component.set( "v.showSchedule", true );
            for( var i = 0; i<Schedules.length; i++ ){
                SchedulesShow.push( 
                    {
                        Id: Schedules[i].Id,
                        showEdit: false,
                        showDelete: false,
                        value: Schedules[i]         
                    });   
            }    
        }        
        console.log( "SchedulesShow --> "+JSON.stringify( SchedulesShow ) );
        console.log( "oppId",component.get("v.oppId"));
        component.set("v.SchedulesShow", SchedulesShow);
        component.set("v.ShowSpinner", false);
    },
    handleEdit : function(component, event, helper) {
        helper.handleButtonClick(component, event);        
    },
    handleDelete : function(component, event, helper) {
        helper.handleButtonClick(component, event);        
    },
    closeModel : function( component,event,helper ){
        helper.closeModelHelper(component,event);        
    },
    handleClick : function(component,event,helper){
        helper.handleClickHelper(component,event);		
    },
    handleNewSch : function(component,event,helper){
        helper.handleNewSchHelper(component,event);
    },
    handleCloseCreate : function(component,event,helper){
        helper.handleCloseCreateHelper(component,event);
    },   
    handleCreate : function( component,event ){
        component.set( "v.showSpinner", true );
        
    },
    /* Executes on Schedule Successful Creation */
    handleSuccessCreate : function(component, event, helper) {
        component.set("v.ShowSpinner", true);
        console.log( "handleSuccessCreate --> " );
        /*
        var payload = event.getParams().response;
        console.log(JSON.stringify(payload));
        var SchedulesShow = component.get("v.SchedulesShow");
        SchedulesShow.push({                 
            Id: payload.Id,
            showEdit: false,
            showDelete: false,
            value: {
                Case__c: component.get("v.CaseID"),
                Id: payload.Id,
                Assignee__c: payload.fields.Assignee__c.displayValue,
                Location__c: component.get("v.oppID"),
                Scheduled_Date__c: payload.fields.Scheduled_Date__c.displayValue,
                Status__c: payload.fields.Status__c.displayValue,
                Type__c: payload.fields.Type__c.displayValue,
                CreatedDate : payload.fields.CreatedDate.displayValue
            }         
        }); 
        let CaseID = component.get("v.CaseID");
        let caseToggleShow = component.get("v.caseToggleShow");
        let caseToggle = component.get("v.caseToggle");        
        
        for( let i = 0; i<caseToggleShow.length; i++ ){
        	console.log( "times --> "+ i);
            if( caseToggleShow[i].key == CaseID ){
                if( caseToggleShow[i].value.Schedule__r == undefined ){
                    caseToggleShow[i].value.Schedule__r = [];
                }
                caseToggleShow[i].value.Schedule__r.push({
                    Case__c: component.get("v.CaseID"),
                    Id: payload.Id,
                    Assignee__c: payload.fields.Assignee__c.displayValue,
                    Location__c: component.get("v.oppID"),
                    Scheduled_Date__c: payload.fields.Scheduled_Date__c.displayValue,
                    Status__c: payload.fields.Status__c.displayValue,
                    Type__c: payload.fields.Type__c.displayValue,
                    CreatedDate : payload.fields.CreatedDate.displayValue
                });
                break;
            }
        }
		helper.showInfoToast( component, event, "Success", "New Schedule record is been created" ); 
        
       
        component.set("v.caseToggleShow", caseToggleShow );
        component.set("v.caseToggle", caseToggle);
        console.log( "caseToggleShow --> "+JSON.stringify( caseToggleShow ) );
        console.log( "caseToggle --> "+JSON.stringify( caseToggle ) );
        //console.log( "SchedulesShow --> "+SchedulesShow );
        component.set("v.SchedulesShow", SchedulesShow);
        component.set("v.showSchedule", true);
        helper.handleCreateHelper(component,event);
        */
        helper.handleSuccessCreateHelper( component,event );
        component.set("v.ShowSpinner", false);
    },
    handleSuccessEdit : function(component, event, helper) {
        var SchID = component.get( "v.SchID" );        
        var SchedulesShow = component.get("v.SchedulesShow");        
        var crtSchedule = component.get("v.crtSchedule");
        console.log("crtSchedule --> "+JSON.stringify(crtSchedule));
        for( var i = 0; i<SchedulesShow.length; i++ ){
            if( SchedulesShow[i].Id == SchID ){
                SchedulesShow[i].value.Assignee__c = crtSchedule.Assignee__c; 
                SchedulesShow[i].value.Scheduled_Date__c = crtSchedule.Scheduled_Date__c; 
                SchedulesShow[i].value.Status__c = crtSchedule.Status__c; 
                SchedulesShow[i].value.Type__c = crtSchedule.Type__c; 
                SchedulesShow[i].showEdit = false;                
                component.set( "v.SchID", "" );
                break;
            }
        }
        component.set("v.SchedulesShow", SchedulesShow);
        component.set( "v.crtSchedule", component.get("v.defSchedule") );        
    },
    handleDelete : function(component,event,helper){
        var schID = event.getSource().get("v.title");	
        console.log( "schID --> "+schID );
        let action = component.get("c.deleteSchedule");
        action.setParams({
            schId : schID    
        });
        action.setCallback(this, function(response){
            let state = response.getState();
            if( state == 'SUCCESS' ){
                let SchedulesShow = component.get("v.SchedulesShow");
                for( let i = 0; i<SchedulesShow.length; i++ ){
                    if( SchedulesShow[i].Id == schID ){
                        SchedulesShow.splice(i,1);
                    }
                }       
                console.log("here --> ");
                component.set("v.SchedulesShow",SchedulesShow);
                let CaseID = component.get("v.CaseID");
                let caseToggleShow = component.get("v.caseToggleShow");
                let caseToggle = component.get("v.caseToggle");        
                for( let i = 0; i<caseToggleShow.length; i++ ){
                    if( caseToggleShow[i].key == CaseID ){
                        for( let j = 0; j<caseToggleShow[i].value.Schedule__r.length; j++ ){
                            if( caseToggleShow[i].value.Schedule__r[j].Id == schID ){
                                caseToggleShow[i].value.Schedule__r.splice(j,1);
                                break;
                            }
                        }
                    }
                }
                console.log("here 1 --> ");
                for( let i = 0; i<caseToggle.length; i++ ){
                    if( caseToggle[i].key == CaseID ){
                        for( let j = 0; j<caseToggle[i].value.Schedule__r.length; j++ ){
                            if( caseToggle[i].value.Schedule__r[j].Id == schID ){
                                caseToggle[i].value.Schedule__r.splice(j,1);
                                break;
                            }
                        }
                    }
                }
				console.log("here 2 --> ");                
                component.set("v.caseToggleShow", caseToggleShow );
                component.set("v.caseToggle", caseToggle);
            }    
            helper.showInfoToast( component, event, "Success", "Schedule record is successfully deleted" );
        });
        $A.enqueueAction(action)
    }
})

*******
HELPER
*******
({
    /* Handles Edit and Delete */
    handleButtonClick : function(component,event) {
        var SchID = event.getSource().get("v.title");		
        var SchedulesShow = component.get("v.SchedulesShow");
        var crtSchedule = component.get("v.crtSchedule");
        for( var i = 0; i<SchedulesShow.length; i++ ){
            if( SchedulesShow[i].Id == SchID ){
                crtSchedule.Id = SchID;
                crtSchedule.Assignee__c = SchedulesShow[i].value.Assignee__c; 
                crtSchedule.Scheduled_Date__c = SchedulesShow[i].value.Scheduled_Date__c; 
                crtSchedule.Status__c = SchedulesShow[i].value.Status__c; 
                crtSchedule.Type__c = SchedulesShow[i].value.Type__c; 
                SchedulesShow[i].showEdit = true;
                component.set( "v.SchID", SchID );
                break;
            }
        }
        component.set("v.SchedulesShow", SchedulesShow); 
        component.set("v.crtSchedule",crtSchedule);
        console.log( "crtSchedule --> "+JSON.stringify( crtSchedule ) );
        this.showInfoToast( component,event,"Success", "The Schedule record has been edited" );
    },
    closeModelHelper : function(component,event){
        var SchID = component.get( "v.SchID" );        
        var SchedulesShow = component.get("v.SchedulesShow");        
        for( var i = 0; i<SchedulesShow.length; i++ ){
            if( SchedulesShow[i].Id == SchID ){                
                SchedulesShow[i].showEdit = false;                
                component.set( "v.SchID", "" );
                break;
            }
        }
        component.set("v.SchedulesShow", SchedulesShow);    
        component.set( "v.crtSchedule", component.get("v.defSchedule") );
    },
    /* Executes When the user clicks the submit button on Schedule Edit Form */
    handleClickHelper : function(component,event,helper){
        var SchID = component.get( "v.SchID" );        
        var SchedulesShow = component.get("v.SchedulesShow");        
        var crtSchedule = component.get("v.crtSchedule");
        console.log("crtSchedule --> "+JSON.stringify(crtSchedule));
        for( var i = 0; i<SchedulesShow.length; i++ ){
            if( SchedulesShow[i].Id == SchID ){
                SchedulesShow[i].value.Assignee__c = crtSchedule.Assignee__c; 
                SchedulesShow[i].value.Scheduled_Date__c = crtSchedule.Scheduled_Date__c; 
                SchedulesShow[i].value.Status__c = crtSchedule.Status__c; 
                SchedulesShow[i].value.Type__c = crtSchedule.Type__c; 
                SchedulesShow[i].showEdit = false;                
                component.set( "v.SchID", "" );
                break;
            }
        }
        component.set("v.SchedulesShow", SchedulesShow);
        component.set( "v.crtSchedule", component.get("v.defSchedule") );        
    },
    handleNewSchHelper : function(component,event){
        component.set("v.isModalOpen", true);
    },
    handleCloseCreateHelper : function(component,event){
        component.set("v.isModalOpen", false);
    },
    handleCreateHelper : function(component,event){                                       
        component.set("v.isModalOpen", false);
    },
    showInfoToast : function(component, event, title, message) {
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            title : title,
            message: message,
            duration:'6000',
            key: 'info_alt',
            type: 'success',
            mode: 'dismissible'
        });
        toastEvent.fire();
    },
    handleSuccessCreateHelper : function( component,event ){
        component.set( "v.showSpinner",true ); 
        let CaseID = component.get("v.CaseID");
        let action = component.get("c.sendUpdatedScheduled");
        action.setParams({
            caseId : CaseID
        });
        action.setCallback(this, function(response){
            let state = response.getState();
            if( state == "SUCCESS" ){
                let SchedulesShow = [];
                let caseToggleShow = component.get("v.caseToggleShow");
                for( let i = 0; i<caseToggleShow.length; i++ ){
                    if( caseToggleShow[i].key == CaseID ){
                        caseToggleShow[i].value.Schedule__r = [];                        
                        let updatedSchedule = response.getReturnValue();                        
                        for( let j = 0; j<updatedSchedule.length; j++ ){
                            caseToggleShow[i].value.Schedule__r.push( updatedSchedule[j] );
                            SchedulesShow.push( {
                                Id: updatedSchedule[j].Id,
                                showEdit: false,
                                showDelete: false,
                                value: updatedSchedule[j]         
                            });
                        }
                        break;
                    }
                }                
                console.log( "SchedulesShow --> "+JSON.stringify( SchedulesShow ) );                
                component.set( "v.isModalOpen", false );
                component.set( "v.SchedulesShow", SchedulesShow );
                component.set( "v.showSpinner",false );
            }
        });	
        $A.enqueueAction(action);
    }
})
